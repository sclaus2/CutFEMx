# NOTE: The CutFEMx Python interface must be built without build
# isolation (PEP517) due to its runtime and build time dependency on
# system built mpi4py.

[build-system]
requires = ["scikit-build-core[pyproject]>=0.5", "nanobind>=2.0.0", "mpi4py"]
build-backend = "scikit_build_core.build"

[project]
name = "cutfemx"
version = "0.1.0"
description = "CutFEMx Python interface"
readme = "../README.md"
requires-python = ">=3.9.0"
license = { file = "../LICENSE" }
authors = [
      { email = "susanne.claus@onera.fr" },
      { name = "Susanne Claus" },
]
dependencies = [
      "numpy>=1.21",
      "cffi",                           # See https://github.com/FEniCS/dolfinx/issues/3340
      "mpi4py",
      "fenics-basix>=0.9.0,<0.10.0",
      "fenics-ffcx>=0.9.0,<0.10.0",
      "fenics-ufl>=2024.2.0,<2024.3.0",
      "fenics-dolfinx>=0.9.0,<0.10.0",
]

[project.optional-dependencies]
docs = [
      "breathe",
      "jupytext",
      "markdown",
      "matplotlib",
      "myst_parser",
      "pyyaml",
      "sphinx",
      "sphinx_rtd_theme",
]
lint = ["ruff>=0.2.0"]
optional = ["numba", "pyamg"]
petsc4py = ["petsc4py"]
test = ["pytest", "scipy", "matplotlib", "cutfemx[optional]"]
ci = [
      "mypy",
      "pytest-xdist",
      "types-setuptools",
      "cutfemx[build]",
      "cutfemx[test]",
]

[tool.scikit-build]
wheel.packages = ["cutfemx"]
sdist.exclude = ["*.cpp"]
cmake.build-type = "Release"
wheel.license-files = ["../LICENSE"]

[tool.pytest]
junit_family = "xunit2"

[tool.pytest.ini_options]
markers = [
      "skip_in_parallel: marks tests that should be run in serial only.",
      "petsc4py: tests that require PETSc/petsc4py (deselect with '-m \"not petsc4py\"').",
      "adios2: tests that require Adios2 (deselect with '-m \"not adios2\"').",
      "xfail_win32_complex: expected failures for complex numbers in Win32.",
]


[tool.mypy]
# Suggested at https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
# Goal would be to make all of the below True long-term
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = false
check_untyped_defs = false
warn_return_any = false
warn_unused_ignores = false
show_error_codes = true
ignore_missing_imports = true


[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
      "E",      # pycodestyle
      "W",      # pycodestyle
      "F",      # pyflakes
      "I",      # isort - use standalone isort
      "RUF",    # Ruff-specific rules
      "UP",     # pyupgrade
      "ICN",    # flake8-import-conventions
      "NPY",    # numpy-specific rules
      "FLY",    # use f-string not static joins
      "NPY201", # numpy 2.x ruleset
]
ignore = ["UP007", "RUF012"]
allowed-confusables = ["Ïƒ"]

[tool.ruff.lint.isort]
known-first-party = ["basix", "dolfinx", "ffcx", "ufl"]
known-third-party = ["gmsh", "numba", "numpy", "pytest", "pyvista", "pyamg"]
section-order = [
      "future",
      "standard-library",
      "mpi",
      "third-party",
      "first-party",
      "local-folder",
]

[tool.ruff.lint.isort.sections]
"mpi" = ["mpi4py", "petsc4py"]
